data$prbconv <- as.numeric(levels(data$prbconv))[data$prbconv]
#check that all fields are numerical
for (field in names(data)) {
stopifnot(class(data[,field]) %in% c("numeric", "integer"))
}
C <- data[, c('west', 'central', 'urban')]
df.categorical <- data[, c('crmrte', 'west', 'central', 'urban')]
colnames(df.categorical) <- c('crmrte', '2. West', '1. Central', '3. Urban')
dt_long <- gather(df.categorical, key, value, -crmrte)
ggplot(dt_long, aes(x = crmrte, y = factor(value))) +
geom_point() +
facet_grid(. ~ key) +
theme_classic()+
theme(plot.title = element_text(hjust = 0.5))+
labs(title="Crime rate distribution for central, west, and urban",
x='Crime rate',
y = "County belongs to category?") +
scale_y_discrete(breaks=c(0,1), labels=c("False","True"))
u <- data %>%
group_by(urban) %>%
summarise(mean_crime_rate = mean(crmrte)) %>%
as.data.frame()
u$urban <- c('N', 'Y')
w <- data %>%
group_by(west) %>%
summarise(mean_crime_rate = mean(crmrte)) %>%
as.data.frame()
w$west <- c('N', 'Y')
print(u)
print(w)
y <- data$crmrte
X <- data[,!names(data) %in% c('county',
'year',
'crmrte',
'west',
'central',
'urban')]
for (x in names(X)) {
crmrte_cor <- cor(y, data[,x])
corr <- as.data.frame(crmrte_cor,
col.names = c('crmrte_cor')) %>%
add_column(variable = x, .before = 1)
cor_df <- rbind(cor_df, corr)
}
cor_df <- arrange(cor_df, desc(crmrte_cor))
print(head(cor_df, n = 3))
print(tail(cor_df, n = 3))
print(cor_df)
y <- data$crmrte
X <- data[,!names(data) %in% c('county',
'year',
'crmrte',
'west',
'central',
'urban')]
#correlate all variables and store in new dataframe
cor_df <- data.frame(variable = character(),
crmrte_cor = numeric())
for (x in names(X)) {
crmrte_cor <- cor(y, data[,x])
corr <- as.data.frame(crmrte_cor,
col.names = c('crmrte_cor')) %>%
add_column(variable = x, .before = 1)
cor_df <- rbind(cor_df, corr)
}
cor_df <- arrange(cor_df, desc(crmrte_cor))
print(cor_df)
cookd(lm(y ~ X$prbarr))
library(cran)
cooksd(lm(y ~ X$prbarr))
cooks.distance(lm(y ~ X$prbarr))
cooks.distance(lm(y ~ X$prbarr)) > 0
cooks.distance(lm(y ~ X$prbarr)) > 1
a=c()
append(a,1)
append(a,1443)
for (var in X) {
mod <- lm(y ~ X[, var])
}
for (var in names(X)) {
mod <- lm(y ~ X[, var])
}
mode
mod
cooks.distance(mod)
cooks.distance(mod) > 0
cooks.distance(mod) > 1
names(cooks.distance(mod))[cooks.distance(mod) > 1]
influential_outliers <- names(cooks.distances)[cooks.distances >= 1]
cooks.distances <- cooks.distance(mod)
for (var in names(X)) {
mod <- lm(y ~ X[, var])
cooks.distances <- cooks.distance(mod)
influential_outliers <- names(cooks.distances)[cooks.distances >= 1]
}
influential_outliers
cooks.outliers <- data.frame(cor_variable = character(),
distance = numeric(),
data.points = c())
influential_outliers
cooks.outliers
cooks.distances[influential_outliers]
for (var in names(X)) {
mod <- lm(y ~ X[, var])
cooks.distances <- cooks.distance(mod)
influential_outliers <- names(cooks.distances)[cooks.distances >= 1]
cooks.outliers <- rbind(cooks.outliers, data.frame(cor_variable = var,
distance = cooks.distances[influential_outliers],
data.points = influential_outliers))
}
cooks.distance()
cooks.distances
cooks.outliers
data.frame(cor_variable = var,
distance = cooks.distances[influential_outliers],
data.points = influential_outliers)
data.frame(cor_variable = var,
distance = cooks.distances[influential_outliers],
data.points = array(influential_outliers))
data.frame(cor_variable = var,
distance = array(cooks.distances[influential_outliers]),
data.points = array(influential_outliers))
data.frame(cor_variable = var)
data.frame(cor_variable = var, distance=cooks.distances)
data.frame(cor_variable = var, distance=cooks.distances[influential_outliers])
cooks.distances[influential_outliers]
influential_outliers
length(influential_outliers)
for (var in names(X)) {
mod <- lm(y ~ X[, var])
cooks.distances <- cooks.distance(mod)
influential_outliers <- names(cooks.distances)[cooks.distances >= 1]
if (length(influential_outliers > 1)) {
cooks.outliers <- rbind(cooks.outliers, data.frame(cor_variable = var,
distance = cooks.distances[influential_outliers],
data.points = influential_outliers))
}
}
cooks.outliers
cooks.outliers <- data.frame(cor_variable = character(),
distance = c(),
data.points = c())
for (var in names(X)) {
mod <- lm(y ~ X[, var])
cooks.distances <- cooks.distance(mod)
influential_outliers <- names(cooks.distances)[cooks.distances >= 0.5]
if (length(influential_outliers > 1)) {
cooks.outliers <- rbind(cooks.outliers, data.frame(cor_variable = var,
distance = cooks.distances[influential_outliers],
data.points = influential_outliers))
}
}
cooks.outliers
cooks.outliers <- data.frame(cor_variable = character(),
distance = c(),
data.points = c())
for (var in names(X)) {
mod <- lm(y ~ X[, var])
cooks.distances <- cooks.distance(mod)
influential_outliers <- names(cooks.distances)[cooks.distances >= 1]
if (length(influential_outliers > 1)) {
cooks.outliers <- rbind(cooks.outliers, data.frame(cor_variable = var,
distance = cooks.distances[influential_outliers],
data.points = influential_outliers))
}
}
cooks.outliers
cooks.outliers <- data.frame(cor_variable = character(),
distance = c(),
data.points = c())
for (var in names(X)) {
mod <- lm(y ~ X[, var])
cooks.distances <- cooks.distance(mod)
influential_outliers <- names(cooks.distances)[cooks.distances >= 1]
if (length(influential_outliers > 1)) {
cooks.outliers <- rbind(cooks.outliers, data.frame(cor_variable = var,
distance = cooks.distances[influential_outliers],
data.points = influential_outliers))
}
}
print(cooks.outliers)
X
X$county
X$prbconv_offense <- X$prbarr * X$prbconv
X$prbpris_offense <- X$prbconv_offense * X$prbpris
names(X)
X[-2]
names(X[-2])
X
names(X)
names(X[-2:-3])
library(MASS)
select dplyr::select()
select <- dplyr::select()
select <- dplyr::select
X$prbconv_offense <- X$prbarr * X$prbconv
X$prbpris_offense <- X$prbconv_offense * X$prbpris
X <- X[-2:-3] #remove original prbarr, prbpris variable in factor of transformed
names(X)
cbind(X, C)
names(cbind(X, C))
train_X <- cbind(X, C)
model <- lm(y ~ ., data=train_X)
AIC.min_model <- train(train_x,  y, method = glmStepAIC )
AIC.min_model <- train(train_X,  y, method = glmStepAIC )
library(MASS)
select <- dplyr::select #unmask select from dplyr
AIC.min_model <- train(train_X,  y, method = glmStepAIC )
AIC.min_model <- train(train_X,  y, method = lmStepAIC )
AIC.min_model <- train(train_X,  y, method = leapForward )
library(leeps)
install.packages(leeps)
install.packages('leeps')
install.packages('MASS')
install.packages("MASS")
library(dplyr)
library(ggplot2)
library(tidyr)
library(caret)
library(MASS)
select <- dplyr::select #unmask select from dplyr
library(stargazer)
library(tibble)
setwd("~/Desktop/Stone/Berkeley_MIDS/Statistics/Labs/Lab_3")
full_data <- read.csv('crime_v2.csv')
data <- na.omit(full_data)
#check for duplicated data and remove
sum(duplicated(data))
data <- distinct(data, .keep_all=T)
#convert prbconv factor in numeric
data$prbconv <- as.numeric(levels(data$prbconv))[data$prbconv]
#check that all fields are numerical
for (field in names(data)) {
stopifnot(class(data[,field]) %in% c("numeric", "integer"))
}
library(dplyr)
library(ggplot2)
library(tidyr)
library(caret)
library(MASS)
select <- dplyr::select #unmask select from dplyr
library(stargazer)
library(tibble)
setwd("~/Desktop/Stone/Berkeley_MIDS/Statistics/Labs/Lab_3")
full_data <- read.csv('crime_v2.csv')
data <- na.omit(full_data)
#check for duplicated data and remove
sum(duplicated(data))
data <- distinct(data, .keep_all=T)
#convert prbconv factor in numeric
data$prbconv <- as.numeric(levels(data$prbconv))[data$prbconv]
#check that all fields are numerical
for (field in names(data)) {
stopifnot(class(data[,field]) %in% c("numeric", "integer"))
}
C <- data[, c('west', 'central', 'urban')]
df.categorical <- data[, c('crmrte', 'west', 'central', 'urban')]
colnames(df.categorical) <- c('crmrte', '2. West', '1. Central', '3. Urban')
dt_long <- gather(df.categorical, key, value, -crmrte)
ggplot(dt_long, aes(x = crmrte, y = factor(value))) +
geom_point() +
facet_grid(. ~ key) +
theme_classic()+
theme(plot.title = element_text(hjust = 0.5))+
labs(title="Crime rate distribution for central, west, and urban",
x='Crime rate',
y = "County belongs to category?") +
scale_y_discrete(breaks=c(0,1), labels=c("False","True"))
u <- data %>%
group_by(urban) %>%
summarise(mean_crime_rate = mean(crmrte)) %>%
as.data.frame()
u$urban <- c('N', 'Y')
w <- data %>%
group_by(west) %>%
summarise(mean_crime_rate = mean(crmrte)) %>%
as.data.frame()
w$west <- c('N', 'Y')
print(u)
print(w)
y <- data$crmrte
X <- data[,!names(data) %in% c('county',
'year',
'crmrte',
'west',
'central',
'urban')]
#correlate all variables and store in new dataframe
cor_df <- data.frame(variable = character(),
crmrte_cor = numeric())
for (x in names(X)) {
crmrte_cor <- cor(y, data[,x])
corr <- as.data.frame(crmrte_cor,
col.names = c('crmrte_cor')) %>%
add_column(variable = x, .before = 1)
cor_df <- rbind(cor_df, corr)
}
cor_df <- arrange(cor_df, desc(crmrte_cor))
print(cor_df)
cooks.outliers <- data.frame(cor_variable = character(),
distance = c(),
county = c())
for (var in names(X)) {
mod <- lm(y ~ X[, var])
cooks.distances <- cooks.distance(mod)
influential_outliers <- names(cooks.distances)[cooks.distances >= 1]
if (length(influential_outliers > 1)) {
cooks.outliers <- rbind(cooks.outliers, data.frame(cor_variable = var,
distance = cooks.distances[influential_outliers],
county = influential_outliers))
}
}
print(cooks.outliers)
X$prbconv_offense <- X$prbarr * X$prbconv
X$prbpris_offense <- X$prbconv_offense * X$prbpris
X <- X[-2:-3] #remove original prbarr, prbpris variable in factor of transformed
train_X <- cbind(X, C)
model <- lm(y ~ ., data=train_X)
AIC.min_model <- train(train_X,  y, method = leapForward )
leaps::leapSeq
AIC.min_model <- stepAIC(model)
AIC.min_model <- stepAIC(model, verbose = FALSE)
AIC.min_model <- stepAIC(model, verbose = FALSE)
AIC.min_model <- stepAIC(model, trace = FALSE)
summary(AIC.min_model)$r.squared
AIC(AIC.min_model)
AIC(model)
AIC.min_model <- stepAIC(model, trace = FALSE, direction = 'forward')
summary(AIC.min_model)$r.squared
AIC(AIC.min_model)
model <- lm(y ~ ., data=train_X)
AIC(model)
AIC.min_model <- stepAIC(model, trace = FALSE, direction = 'forward')
summary(AIC.min_model)$r.squared
AIC(AIC.min_model)
model <- lm(y ~ ., data=train_X)
AIC(model)
AIC.min_model <- stepAIC(model, trace = FALSE, direction = 'backward')
summary(AIC.min_model)$r.squared
AIC(AIC.min_model)
lmStAIC.min_model
AIC.min_model
X <- data[,!names(data) %in% c('county',
'year',
'crmrte',
'density',
'west',
'central',
'urban')]
library(dplyr)
library(ggplot2)
library(tidyr)
library(caret)
library(MASS)
select <- dplyr::select #unmask select from dplyr
library(stargazer)
library(tibble)
setwd("~/Desktop/Stone/Berkeley_MIDS/Statistics/Labs/Lab_3")
full_data <- read.csv('crime_v2.csv')
data <- na.omit(full_data)
#check for duplicated data and remove
sum(duplicated(data))
data <- distinct(data, .keep_all=T)
#convert prbconv factor in numeric
data$prbconv <- as.numeric(levels(data$prbconv))[data$prbconv]
#check that all fields are numerical
for (field in names(data)) {
stopifnot(class(data[,field]) %in% c("numeric", "integer"))
}
C <- data[, c('west', 'central', 'urban')]
df.categorical <- data[, c('crmrte', 'west', 'central', 'urban')]
colnames(df.categorical) <- c('crmrte', '2. West', '1. Central', '3. Urban')
dt_long <- gather(df.categorical, key, value, -crmrte)
ggplot(dt_long, aes(x = crmrte, y = factor(value))) +
geom_point() +
facet_grid(. ~ key) +
theme_classic()+
theme(plot.title = element_text(hjust = 0.5))+
labs(title="Crime rate distribution for central, west, and urban",
x='Crime rate',
y = "County belongs to category?") +
scale_y_discrete(breaks=c(0,1), labels=c("False","True"))
u <- data %>%
group_by(urban) %>%
summarise(mean_crime_rate = mean(crmrte)) %>%
as.data.frame()
u$urban <- c('N', 'Y')
w <- data %>%
group_by(west) %>%
summarise(mean_crime_rate = mean(crmrte)) %>%
as.data.frame()
w$west <- c('N', 'Y')
print(u)
print(w)
y <- data$crmrte
X <- data[,!names(data) %in% c('county',
'year',
'crmrte',
'density',
'west',
'central',
'urban')]
#correlate all variables and store in new dataframe
cor_df <- data.frame(variable = character(),
crmrte_cor = numeric())
for (x in names(X)) {
crmrte_cor <- cor(y, data[,x])
corr <- as.data.frame(crmrte_cor,
col.names = c('crmrte_cor')) %>%
add_column(variable = x, .before = 1)
cor_df <- rbind(cor_df, corr)
}
cor_df <- arrange(cor_df, desc(crmrte_cor))
print(cor_df)
cooks.outliers <- data.frame(cor_variable = character(),
distance = c(),
county = c())
for (var in names(X)) {
mod <- lm(y ~ X[, var])
cooks.distances <- cooks.distance(mod)
influential_outliers <- names(cooks.distances)[cooks.distances >= 1]
if (length(influential_outliers > 1)) {
cooks.outliers <- rbind(cooks.outliers, data.frame(cor_variable = var,
distance = cooks.distances[influential_outliers],
county = influential_outliers))
}
}
print(cooks.outliers)
X$prbconv_offense <- X$prbarr * X$prbconv
X$prbpris_offense <- X$prbconv_offense * X$prbpris
X <- X[-2:-3] #remove original prbarr, prbpris variable in factor of transformed
train_X <- cbind(X, C)
#nonwage_variables <- c('prbarr', 'prbconv', 'prbpris', 'avgsen',
#                       'polpc',
#                       'pctymle', 'pctmin80')
#wage_variables <- c('wtrd', 'wfir', 'wser', 'wfed', 'wsta', 'wloc',
#                    'wcon', 'wtuc', 'wmfg')
#X_non_wage <- data[, names(data) %in% nonwage_variables]
#X_wage <- lapply(data[, names(data) %in% wage_variables], log)
#X_stepwise_set1 <- cbind(X_non_wage, X_wage)
model <- lm(y ~ ., data=train_X)
AIC(model)
AIC.min_model <- stepAIC(model, trace = FALSE, direction = 'backward')
summary(AIC.min_model)$r.squared
AIC(AIC.min_model)
AIC.min_model
names(X)
length(names(X))
AIC.min_model <- stepAIC(model, trace = FALSE, direction = 'backward', steps = 10000)
summary(AIC.min_model)$r.squared
AIC(AIC.min_model)
AIC.min_model <- stepAIC(model, trace = FALSE, direction = 'forward', steps = 10000)
summary(AIC.min_model)$r.squared
AIC(AIC.min_model)
AIC.min_model <- stepAIC(model, trace = FALSE, direction = 'both', steps = 10000)
summary(AIC.min_model)$r.squared
AIC(AIC.min_model)
AIC.min_model <- stepAIC(model,
trace = FALSE,
direction = 'both',
scope = list(upper=model_upper,lower=model_lower))
model_lower <- lm(y ~ 1)
model_upper <- lm(y ~ ., data=train_X)
model_lower <- lm(y ~ 1)
AIC.min_model <- stepAIC(model,
trace = FALSE,
direction = 'both',
scope = list(upper=model_upper,lower=model_lower))
summary(AIC.min_model)$r.squared
model_upper <- lm(y ~ ., data=train_X)
model_upper
summary(model_upper)
summary(AIC.min_model)
AIC.min_model <- stepAIC(model_upper,
trace = FALSE,
direction = 'backward',
scope = list(upper=model_upper,lower=model_lower))
summary(AIC.min_model)$r.squared
AIC.min_model <- stepAIC(model_upper,
trace = FALSE,
direction = 'forward',
scope = list(upper=model_upper,lower=model_lower))
summary(AIC.min_model)$r.squared
AIC.min_model
AIC.min_model <- stepAIC(model_upper,
trace = FALSE,
direction = 'both',
scope = list(upper=model_upper,lower=model_lower))
summary(AIC.min_model)$r.squared
AIC.min_model <- stepAIC(model_lower,
trace = FALSE,
direction = 'forward',
scope = list(upper=model_upper,lower=model_lower))
summary(AIC.min_model)$r.squared
model_lower <- lm(y ~ 1)
AIC.min_model <- stepAIC(model_lower,
trace = FALSE,
direction = 'forward',
scope = list(upper=model_upper,lower=model_lower))
model_lower <- lm(y ~ 1, data=train_X)
AIC.min_model <- stepAIC(model_lower,
trace = FALSE,
direction = 'forward',
scope = list(upper=model_upper,lower=model_lower))
summary(AIC.min_model)$r.squared
AIC.min_model <- stepAIC(model_upper,
trace = FALSE,
direction = 'backward',
scope = list(upper=model_upper,lower=model_lower))
summary(AIC.min_model)$r.squared
AIC.min_model
X$wser
