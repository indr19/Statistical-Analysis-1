library(car)
library(lmtest)
library(lmtest)
library(sandwich)
library(stargazer)
library(stargazer)
load("Wage1.rdata")
ls()
# desc includes descriptions of each variable
desc
summary(data)
str(data)
nrow(data)
# We gain an overview using a scatterplot matrix.
scatterplotMatrix(data[ , c("wage", "educ", "exper")])
# Examine the wage variable
summary(data$wage)
hist(data$wage, breaks = 50, main = "Hourly Wage", xlab = "dollars")
summary(data$educ)
hist(data$educ, breaks = 0:20-.5,
main = "Years of Education", xlab = NULL)
summary(data$exper)
hist(data$exper, breaks = 1:52-.5,
main = "Years of Potential Experience", xlab = NULL)
model1 = lm(wage ~ educ + exper, data = data)
summary(model1)
# We might also consider the formal Shapiro-Wilk test of normality.
shapiro.test(model1$residuals)
# get the residual vs. fitted value and scale-location plot
plot(model1)
# There are other tools we can use to assess the CLM assumptions.
# For normality of errors, we can examine the residuals directly.
hist(model1$residuals, breaks = 50)
# We might also consider the formal Shapiro-Wilk test of normality.
shapiro.test(model1$residuals)
# We can confirm the presense of heteroskedasticity with
# a Breusch-Pagan test.  Be careful to consider the sample
# size when interpreting this test.
bptest(model1)
# To address heteroskedasticity, we use robust standard errors.
coeftest(model1, vcov = vcovHC)
vcovHC(model1)
zoo
vcovHC
vcovHC(model1)
vcovHC(model1)
# To address heteroskedasticity, we use robust standard errors.
coeftest(model1, vcov = vcovHC)
model2 = lm(log(wage) ~ educ + exper, data = data)
plot(model2)
# Look at the residuals directly
hist(model2$residuals, breaks = 50)
coeftest(model2, vcov = vcovHC)
# Finally, we display both our models in a regression table
# We need the vectors of robust standard errors.
# We can get these from the coeftest output
(se.model1 = coeftest(model1, vcov = vcovHC)[ , "Std. Error"])
coeftest(model1, vcov = vcovHC)
coeftest(model1, vcov = vcovHC)[,'Std. Error']
vcovHC(model1)
diag(vcovHC(model1))
sqrt(diag(vcovHC(model1)))
type(sqrt(diag(vcovHC(model1))))
class(sqrt(diag(vcovHC(model1))))
(se.model2 = sqrt(diag(vcovHC(model2))))
# We pass the standard errors into stargazer through
# the se argument.
stargazer(model1, model2, type = "text", omit.stat = "f",
se = list(se.model1, se.model2),
star.cutoffs = c(0.05, 0.01, 0.001))
source('~/Desktop/Stone/Berkeley_MIDS/Statistics/Labs/Lab_3/lab_3.R')
cov(data)
cov(data)
cov(data)['density']
class(cov(data))
as.data.frame(cov(data))
as.data.frame(cov(data))['density']
as.data.frame(cor(data))['density']
as.data.frame(cor(data))
as.data.frame(cor(data))
cor(data)
library(dplyr)
library(ggplot2)
library(caret)
library(caret)
library(MASS)
select <- dplyr::select #unmask select from dplyr
library(stargazer)
library(tibble)
setwd("~/Desktop/Stone/Berkeley_MIDS/Statistics/Labs/Lab_3")
full_data <- read.csv('crime_v2.csv')
data <- na.omit(full_data)
data <- distinct(data, .keep_all=T)
#convert prbconv factor in numeric
data$prbconv <- as.numeric(levels(data$prbconv))[data$prbconv]
#check that all fields are numerical
for (field in names(data)) {
stopifnot(class(data[,field]) %in% c("numeric", "integer"))
}
as.data.frame(cor(data))
as.data.frame(cor(data))
columns(name)
columns(data)
names(data)
cor_df
data
data %>% select(summary)
data %>% select(prbarr)
data %>% select(prbarr) %>% summarise()
data %>% select(prbarr, prbconv, prbpris) %>% summarise()
data %>% select(prbarr, prbconv, prbpris)
data %>% summarise(prbarr, prbconv, prbpris)
data %>% select(prbarr, prbconv, prbpris) %>%   summarise_each(funs(min = min,
q25 = quantile(., 0.25),
median = median,
q75 = quantile(., 0.75),
max = max,
mean = mean,
sd = sd))
data %>% summarise(prbarr, prbconv, prbpris)
cols <- c('mpg', 'cyl', 'vs', 'am', 'gear', 'carb')
stargazer(
df[, cols], type = "text",
summary.stat = c("min", "p25", "median", "p75", "max", "median", "sd")
)
fear_factors <- c('prbarr', 'prbconv', 'prbpris', 'avgsen')
stargazer(data[, fear_factors], type='text',
summary.stat = c("min", "p25", "median", "p75", "max", "median", "sd"))
dataa
colnames(dataa)
colnames(data)
data
data[,'prbarr']
iqr(data[,'prbarr'])
IQR(data[,'prbarr'])
quantile(data[, 'prbarr'])
quantile(data[, 'prbarr'], 0.75)
data[,['county', 'outlier_field']]
outlier_field = 'prbarr'
iqr <- IQR(data[,outlier_field])
upper <- quantile(data[, outlier_field], 0.75)
lower <- quantile(data[, outlier_field], 0.25)
iqr
upper
lower
upper-lower
upper + 1.5*iqr
data[, outlier_field]
data[, outlier_field] < 1.5 * iqr
data[, outlier_field] > 1.5 * iqr
data[, outlier_field] > (upper + 1.5 * iqr)
data[, outlier_field] < (lower - 1.5 * iqr)
data[, outlier_field] > (upper + 1.5 * iqr)
(data[, outlier_field] > (upper + 1.5 * iqr)) | (data[, outlier_field] < (upper - 1.5 * iqr))
(data[, outlier_field] > (upper + 1.5 * iqr)) | (data[, outlier_field] < (lower - 1.5 * iqr))
df
data
mask
mask <- (df[, outlier_field] > (upper + 1.5 * iqr)) | (df[, outlier_field] < (lower - 1.5 * iqr))
mask <- (df[, outlier_field] > (upper + 1.5 * iqr)) | (df[, outlier_field] < (lower - 1.5 * iqr))
outlier_field
df = data
mask <- (df[, outlier_field] > (upper + 1.5 * iqr)) | (df[, outlier_field] < (lower - 1.5 * iqr))
mask
data[mask]
data[mask, ]
#function for outlier detection
#we will define outliers as 1.5*IQR above the 1st quartiler or 1.5*IQR below the third
outlier_detector <- function(df, outlier_field) {
iqr <- IQR(data[,outlier_field])
upper <- quantile(df[, outlier_field], 0.75)
lower <- quantile(df[, outlier_field], 0.25)
mask <- (df[, outlier_field] > (upper + 1.5 * iqr)) | (df[, outlier_field] < (lower - 1.5 * iqr))
return (df[mask, ])
}
outlier_detector(data, 'prbarr')
box(data$prbarr)
box(data$prbarr)
box(data$prbarr)
boxplot(data$prbarr)
df_cor
cor_df
outlier_detector(data, 'crmrate')
outlier_detector(data, 'crmrte')
boxplot(data$crmrte)
boxplot(log(data$crmrte))
log(data$crmrate)
data$crmrte
log(data$crmrte)
hist(data$crmrte)
hist(data$crmrte)
hist(data$crmrte, main='Histogram of crime rates for different counties')
hist(data$crmrte,
main='Histogram of crime rates for different counties',
xlab = 'crime rate')
hist(data$crmrte,
main='Histogram of crime rates for different counties',
xlab = 'Crime Rate per Person')
hist(data$crmrte,
main='Histogram of crime rates for different counties',
xlab = 'Crime rate per person')
crmrate
summary(data$crmrte)
hist(data$crmrte,
main='Histogram of crime rates for different counties',
xlab = 'Crime rate per person')
summary(data$crmrte)
hist(data$crmrte,
main='Histogram of crime rates for different counties',
xlab = 'Crime rate per person')
data$crmrte_abs <- data$crmrte
data$crmrte <- log(data$crmrte)
data$crmrte
hist(data$crmrte,
main='Histogram of crime rates for different counties',
xlab = 'Log crime rate per person')
boxplot(data$crmrte, main='Boxplot of crime rates)
boxplot(data$crmrte, main='Boxplot of crime rates')
boxplot(data$crmrte)
data
data[crmrte < -5]
data[data$crmrte < -5]
data[data$crmrte < -5,]
summary(data$polpc)
boxplot(data$density)
boxplot(data$prbarr)
boxplot(data$polpc)
lm(crmrte ~ density + prbarr + polpc, data=data)
a<-lm(crmrte ~ density + prbarr + polpc, data=data)
a
summary(a)$adj.r.squared
abline(lm(data$crmrte ~ data$polpc))
plot(data$crmrte, data$polpc)
abline(lm(data$crmrte ~ data$polpc))
outlier_detector(data$prbarr)
outlier_detector(data, 'prbarr')
outlier_detector(data, 'wcon')
outlier_detector(data, 'wman')
boxplot(data$wcon)
hist(data$wcon)
hist(data$wmfg)
hist(data$prbarr)
data[data$prbarr > 1, ]
data[data$wcon]
data[data$wcon, 1]
hist(data$density)
data[data$density > 8, ]
model_1 <- lm(crmrte ~ density + prbarr + wcom + wmfg, data = data)
model_1 <- lm(crmrte ~ density + prbarr + wcon + wmfg, data = data)
model_1
summary(model_1)$adjusted.r.squared
summary(model_1)$adj.r.squared
AIC(model_1)
library(MASS)
AICmin
model_1
print(model_1)
lm(crmrte ~ density + prbarr + wfed, data = data)
grep('^w', names(data))
data[,grep('^w', names(data))]
names(data[,grep('^w', names(data))])
lm(crmrte ~ density + prbarr + wcon + wtuc + wtrd + wfir + wser + wmfg + wfed + wsta + wloc, data = data)
lm(crmrte ~ dprbarr + wcon + wtuc + wtrd + wfir + wser + wmfg + wfed + wsta + wloc, data = data)
lm(crmrte ~ prbarr + wcon + wtuc + wtrd + wfir + wser + wmfg + wfed + wsta + wloc, data = data)
#first model
model_1 <- lm(crmrte ~ prbarr + wcon + wmfg, data = data)
model_1
model_1 <- lm(crmrte ~ prbarr + prbconv + wcon + wmfg, data = data)
model_1
lm(crmrte ~ prbarr + prbconv + wcon + wmfg, data = data)
summary(model_1)$adj.r.squared
lm(crmrte ~ prbarr + prbconv + wcon + wmfg, data = data)
lm(crmrte ~ prbarr + wcon + wmfg, data = data)
lm(crmrte ~ polpc + prbarr + wcon + wmfg, data = data)
lm(crmrte ~prbarr + wcon + wmfg, data = data)
model_1 <- lm(crmrte ~prbarr + wcon + wmfg, data = data)
summary(model_1)$adj.r.squared
#first model
model_1 <- lm(crmrte ~ prbarr + polpc + wcon + wmfg, data = data)
model_1 <- lm(crmrte ~prbarr + wcon + wmfg, data = data)
#first model
model_1 <- lm(crmrte ~ prbarr + polpc + wcon + wmfg, data = data)
print(model_1)
nonwage_variables <- c('prbarr', 'prbconv', 'prbpris', 'avgsen',
'polpc',
'pctymle', 'pctmin80')
wage_variables <- c('wtrd', 'wfir', 'wser', 'wfed', 'wsta', 'wloc',
'wcon', 'wtuc', 'wmfg')
X_non_wage <- data[, names(data) %in% nonwage_variables]
X_wage <- lapply(data[, names(data) %in% wage_variables], log)
X_stepwise_set1 <- cbind(X_non_wage, X_wage)
stepAIC(lm(crmrte ~ ., data=data))
stepAIC(lm(data$crmrte ~ ., data=X_stepwise_set1))
d <- stepAIC(lm(data$crmrte ~ ., data=X_stepwise_set1))
d
summary(d)
summary(d)$adj.r.squared
d
X
X_stepwise_set1[X_stepwise_set1$polpc > 1]
X_stepwise_set1[X_stepwise_set1$polpc > 1, ]
X_stepwise_set1$polpc
X_stepwise_set1$polpc %>% sort
X_stepwise_set1[X_stepwise_set1$polpc > 0.009, ]
X_stepwise_set1[-51]$polpc
X_stepwise_set1[-51]$polpc %>% sort
X_stepwise_set1[X_stepwise_set1$polpc > 0.009, ]
X_stepwise_set1[X_stepwise_set1$polpc < 0.009, ]
t = X_stepwise_set1[X_stepwise_set1$polpc < 0.009, ]
d <- stepAIC(lm(data$crmrte ~ ., data=t))
t
data$crmrte
data$crmrte[data$crmrte > -5, ]
data$crmrte[data$crmrte > -5]
y <- data$crmrte[data$crmrte > -5]
d <- stepAIC(lm(y ~ ., data=t))
d
plot(t$polpc, y)
lm(y ~  prbarr + prbconv + polpc + pctmin80 + pctymle +
wfed + wsta + wloc)
lm(y ~  prbarr + prbconv + polpc + pctmin80 + pctymle + wfed + wsta + wloc)
lm(y ~  prbarr + prbconv + polpc + pctmin80 + pctymle + wfed + wsta + wloc, data=data)
lm(crmrte ~  prbarr + prbconv + polpc + pctmin80 + pctymle + wfed + wsta + wloc, data=data)
plot(data$polpc, data$crmrte)
#first model
model_1 <- lm(crmrte ~ density + prbarr + prbconv + wcon + wmfg, data = data)
print(model_1)
#first model
model_1 <- lm(crmrte ~ density + prbarr + prbconv + wcon + wmfg, data = data)
print(model_1)
model_1 <- lm(crmrte ~ density + prbarr + prbconv + log(wcon) + log(wmfg), data = data)
model_1
model_2 <- lm(formula = crmrte ~ prbarr + prbconv + polpc + pctmin80 + pctymle + log(wfed) + log(wsta) + log(wloc))
model_2 <- lm(formula = crmrte ~ prbarr + prbconv + polpc + pctmin80 + pctymle + log(wfed) + log(wsta) + log(wloc), data=data)
summary(model_2)adj.r.squared
summary(model_2)$adj.r.squared
summary(model_1)$adj.r.squared
nonwage_variables <- c('prbarr', 'prbconv', 'prbpris', 'avgsen',
'polpc',
'pctymle', 'pctmin80')
wage_variables <- c('wtrd', 'wfir', 'wser', 'wfed', 'wsta', 'wloc',
'wcon', 'wtuc', 'wmfg')
X_non_wage <- data[, names(data) %in% nonwage_variables]
X_wage <- lapply(data[, names(data) %in% wage_variables], log)
X_wage
X_stepwise_set1 <- cbind(X_non_wage, X_wage)
stepAIC(X_stepwise_set1)
history
model_2 <- lm(formula = crmrte ~ prbarr + prbconv + polpc + pctmin80 + pctymle + wfed + wsta + wloc)
d <- stepAIC(lm(data$crmrte ~ ., data=X_stepwise_set1))
d
d
summary(d)$adj.r.squared
cor_df
wage_variables
cor(data$X_wage)
X_wage
as.data.frame(X_wage)
cor(data$as.data.frame(X_wage))
cor(as.data.frame(X_wage))
cor(as.data.frame(X_wage))
#first model
model_1 <- lm(crmrte ~ density + prbarr + prbconv + log(wcon) + log(wmfg), data = data)
print(model_1)
stepAIC(lm(data$crmrte ~ ., data=X_stepwise_set1))
cor(data$as.data.frame(X_wage))
cor(as.data.frame(X_wage))
model_2 <- lm(formula = crmrte ~ prbarr + prbconv + polpc + pctmin80 + pctymle + log(wcon) + log(wmfg) + log(wfed) + log(wsta), data=data)
summary(model_2)$adj.r.squared
print(cor(ad.data.frame(X_wage)))
X_wage <- lapply(data[, names(data) %in% wage_variables], log)
print(cor(ad.data.frame(X_wage)))
print(cor(as.data.frame(X_wage)))
lm(formula = crmrte ~ density + prbarr + prbconv + polpc + pctmin80 + pctymle + log(wcon) + log(wmfg) + log(wfed) + log(wsta), data=data)
model_2 <- lm(formula = crmrte ~ prbarr + prbconv + polpc + pctmin80 + pctymle + log(wcon) + log(wmfg) + log(wfed) + log(wsta), data=data)
summary(model_2)$adj.r.squared
model_2.2 <- lm(formula = crmrte ~ density + prbarr + prbconv + polpc + pctmin80 + pctymle + log(wcon) + log(wmfg) + log(wfed) + log(wsta), data=data)
summary(model_2)$adj.r.squared
summary(model_2.2)$adj.r.squared
#model_2 <- lm(formula = crmrte ~ density + prbarr + prbconv + polpc + pctmin80 + pctymle + log(wcon) + log(wmfg) + log(wfed) + log(wsta), data=data)
model_2 <- lm(formula = crmrte ~ density + prbarr + prbconv + polpc + pctmin80 + pctymle + log(wcon) + log(wmfg) + log(wfed) + log(wsta), data=data)
model_2
summary(lm(formula = crmrte ~ density + prbarr + prbconv + polpc + pctmin80 + pctymle + log(wcon) + log(wmfg) + log(wfed) + log(wsta), data=data))$adj.r.squared
summary(lm(formula = crmrte ~ density + prbarr + prbconv + polpc + pctymle + log(wcon) + log(wmfg) + log(wfed) + log(wsta), data=data))$adj.r.squared
summary(lm(formula = crmrte ~ density + prbarr + prbconv + polpc + log(wcon) + log(wmfg) + log(wfed) + log(wsta), data=data))$adj.r.squared
summary(lm(formula = crmrte ~ density + prbarr + prbconv + polpc + pctmin80 + log(wcon) + log(wmfg) + log(wfed) + log(wsta), data=data))$adj.r.squared
hist(data$pctymle)
summary(lm(formula = crmrte ~ density + prbarr + prbconv + polpc + pctmin80 + log(wcon) + log(wmfg) + log(wfed) + log(wsta), data=data))$adj.r.squared
summary(lm(formula = crmrte ~ density + prbarr + prbconv + polpc + pctmin80 + log(wcon) + log(wmfg) + log(wfed) + log(wsta) + urban, data=data))$adj.r.squared
summary(lm(formula = crmrte ~ density + prbarr + prbconv + polpc + pctmin80 + log(wcon) + log(wmfg) + log(wfed) + log(wsta) + central, data=data))$adj.r.squared
summary(lm(formula = crmrte ~ density + prbarr + prbconv + polpc + pctmin80 + log(wcon) + log(wmfg) + log(wfed) + log(wsta) + central + west + urban, data=data))$adj.r.squared
summary(lm(formula = crmrte ~ density + prbarr + prbconv + polpc + pctmin80 + log(wcon) + log(wmfg) + log(wfed) + log(wsta) + central, data=data))$adj.r.squared
summary(lm(formula = crmrte ~ ., data=data))$adj.r.squared
summary(lm(formula = crmrte ~ ., data=data))$adj.r.squared
lm(formula = crmrte ~ ., data=data)
d <- subset(data, )
d
names(data)
names(data)[-1:-2]
data[,names(data)[-1:-2]]
d = data[,names(data)[-1:-2]]
d
names(d)
summary(lm(formula = crmrte ~ ., data=data))$adj.r.squared
summary(lm(formula = crmrte ~ density + prbarr + prbconv + polpc + pctmin80 + log(wcon) + log(wmfg) + log(wfed) + log(wsta) + central + west + urban + taxpc, data=data))$adj.r.squared
summary(lm(formula = crmrte ~ density + prbarr + prbconv + polpc + pctmin80 + log(wcon) + log(wmfg) + log(wfed) + log(wsta) + central + west + urban + taxpc + wtuc, data=data))$adj.r.squared
summary(lm(formula = crmrte ~ density + prbarr + prbconv + polpc + pctmin80 + log(wcon) + log(wmfg) + log(wfed) + log(wsta) + central + west + urban + taxpc + wtuc + wtrd, data=data))$adj.r.squared
summary(lm(formula = crmrte ~ density + prbarr + prbconv + polpc + pctmin80 + log(wcon) + log(wmfg) + log(wfed) + log(wsta) + central + west + urban + taxpc + wtuc + wtrd + crmr, data=data))$adj.r.squared
d = data[,names(data)[-1:-2][:-length(data)]]
names(data)[-1:-2]
names(data)[-1:-2][-1]
names(data)[-1:-2][1:length(names(data)) - 1]
(names(data)[-1:-2])[1:length(names(data)) - 1]
(names(data)[-1:-2])[1:length(names(data))]
(names(data)[-1:-2])[1:length(names(data)) - 3]
(names(data)[-1:-2])[1:length(names(data)) - 3]
(names(data)[-1:-2])[1:length(names(data)) - 3]
length(names(data)) - 3
(names(data)[-1:-2])[1:23]
d = data[,names(data)[-1:-2][1:23]]
names(d)
summary(lm(formula = crmrte ~ ., data=data))$adj.r.squared
summary(lm(formula = crmrte ~ ., data=d))$adj.r.squared
model_2 <- lm(formula = crmrte ~ density + prbarr + prbconv + polpc + pctmin80 + log(wcon) + log(wmfg) + log(wfed) + log(wsta), data=data)
model_2
model_2 <- lm(formula = crmrte ~ prbarr + prbconv + polpc + pctmin80 + log(wcon) + log(wmfg) + log(wfed) + log(wsta), data=data)
summary(model_2)$adj.r.squared
#first model
model_1 <- lm(crmrte ~ prbarr + prbconv + log(wcon) + log(wmfg), data = data)
print(model_1)
data
model_2 <- lm(formula = crmrte ~ prbarr + prbconv + polpc + pctmin80 + log(wcon) + log(wmfg) + log(wfed) + log(wsta), data=data)
summary(model_2)$adj.r.squared
summary(lm(formula = crmrte ~ prbarr + prbconv + polpc + pctmin80 + log(wcon) + log(wmfg) + log(wfed) + log(wsta), data=data))$adj.r.squared
summary(lm(formula = crmrte ~ prbarr + prbconv + polpc + pctmin80 + log(wcon) + log(wmfg) + log(wfed), data=data))$adj.r.squared
summary(lm(formula = crmrte ~ prbarr + prbconv + polpc + pctmin80 + log(wcon) + log(wmfg), data=data))$adj.r.squared
summary(lm(formula = crmrte ~ prbarr + prbconv + polpc + pctmin80 + log(wcon), data=data))$adj.r.squared
summary(lm(formula = crmrte ~ prbarr + prbconv + polpc + pctmin80, data=data))$adj.r.squared
summary(lm(formula = crmrte ~ prbarr + prbconv + polpc, data=data))$adj.r.squared
summary(lm(formula = crmrte ~ prbarr + prbconv, data=data))$adj.r.squared
summary(lm(formula = crmrte ~ prbarr, data=data))$adj.r.squared
summary(lm(formula = crmrte ~ prbarr + prbconv + polpc + log(wcon) + log(wmfg) + log(wfed) + log(wsta), data=data))$adj.r.squared
summary(lm(formula = crmrte ~ prbarr + prbconv + polpc + pctmin80 + log(wcon) + log(wmfg) + log(wfed) + log(wsta), data=data))$adj.r.squared
summary(lm(formula = crmrte ~ prbconv + polpc + pctmin80 + log(wcon) + log(wmfg) + log(wfed) + log(wsta), data=data))$adj.r.squared
summary(lm(formula = crmrte ~ prbarr + prbconv + polpc + pctmin80 + log(wcon) + log(wfed) + log(wsta), data=data))$adj.r.squared
summary(lm(formula = crmrte ~ prbarr + prbconv + polpc + pctmin80 + log(wcon) + log(wsta), data=data))$adj.r.squared
summary(lm(formula = crmrte ~ prbarr + prbconv + polpc + pctmin80 + log(wcon), data=data))$adj.r.squared
summary(lm(formula = crmrte ~ prbarr + prbconv + pctmin80 + log(wcon), data=data))$adj.r.squared
summary(lm(formula = crmrte ~ prbarr + prbconv + pctmin80 + log(wcon), data=data))$adj.r.squared
summary(lm(formula = crmrte ~ prbarr + prbconv + polpc + pctmin80 + log(wcon) + log(wfed) + log(wsta), data=data))$adj.r.squared
summary(lm(formula = crmrte ~ ., data=d))$adj.r.squared
summary(lm(formula = crmrte ~ ., data=data))$adj.r.squared
d
data
nonwage_variables <- c('prbarr', 'prbconv', 'prbpris', 'avgsen',
'polpc', 'density',
'pctymle', 'pctmin80')
'urban', 'central', 'west)
'pctymle', 'pctmin80', 'mix',
nonwage_variables <- c('prbarr', 'prbconv', 'prbpris', 'avgsen',
'polpc', 'density',
'pctymle', 'pctmin80', 'mix',
'urban', 'central', 'west')
wage_variables <- c('wtrd', 'wfir', 'wser', 'wfed', 'wsta', 'wloc',
'wcon', 'wtuc', 'wmfg')
X_wage <- lapply(data[, names(data) %in% wage_variables], log)
X_non_wage <- data[, names(data) %in% nonwage_variables]
X_stepwise_set1 <- cbind(X_non_wage, X_wage)
names(X_stepwise_set1)
length(names(X_stepwise_set1))
length(names(data))
names(data)
nonwage_variables <- c('prbarr', 'prbconv', 'prbpris', 'avgsen',
'polpc', 'density', 'taxpc',
'pctymle', 'pctmin80', 'mix',
'urban', 'central', 'west')
wage_variables <- c('wtrd', 'wfir', 'wser', 'wfed', 'wsta', 'wloc',
'wcon', 'wtuc', 'wmfg')
X_non_wage <- data[, names(data) %in% nonwage_variables]
X_wage <- lapply(data[, names(data) %in% wage_variables], log)
X_stepwise_set1 <- cbind(X_non_wage, X_wage)
nonwage_variables <- c('prbarr', 'prbconv', 'prbpris', 'avgsen',
'polpc', 'density', 'taxpc',
'pctymle', 'pctmin80', 'mix',
'urban', 'central', 'west')
wage_variables <- c('wtrd', 'wfir', 'wser', 'wfed', 'wsta', 'wloc',
'wcon', 'wtuc', 'wmfg')
X_non_wage <- data[, names(data) %in% nonwage_variables]
X_wage <- lapply(data[, names(data) %in% wage_variables], log)
X_wage_transformed <- cbind(X_non_wage, X_wage)
length(data)
length(X_wage_transformed)
names(data)
names(X_wage_transformed) %in% names(data)
names(data) %in% names(X_wage_transformed)
names(X_wage_transformed)
summary(lm(formula = crmrte ~ ., data=X_wage_transformed))$adj.r.squared
summary(lm(formula = data$crmrte ~ ., data=X_wage_transformed))$adj.r.squared
model_2 <- lm(formula = crmrte ~ prbarr + prbconv + polpc + pctmin80 + log(wcon) + log(wmfg) + log(wfed) + log(wsta), data=data)
summary(model_2)$adj.r.squared
install.packages('car', dependencies = T)
install.packages('car', dependencies = T)
install.packages('car', dependencies = T, type='binary')
install.packages('car', dependencies = T)
qf(0.99, 3, 347)
qt(0.99, 3, 347)
qf(0.99, 3, 346)
qf(0.99, 3, 349)
qf(0.995, 3, 349)
qf(0.99, 3, 349)
1-.99
1-.999
